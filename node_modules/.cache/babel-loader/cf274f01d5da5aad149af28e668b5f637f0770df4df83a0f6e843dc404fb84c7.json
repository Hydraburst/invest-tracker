{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\invest-tracker\\\\src\\\\App.js\";\nimport React from \"react\";\nimport InvestForm from \"./components/InvestForm\";\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  function saveData(data) {\n    const investData = {\n      ...data,\n      id: Math.random().toString()\n    };\n  }\n  const calculateHandler = () => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +savings; // feel free to change the shape of this input object!\n    const yearlyContribution = +yearlySaving; // as mentioned: feel free to change the shape...\n    const expectedReturn = +invInterest / 100;\n    const duration = +invDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestForm, {\n      onGetData: saveData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      savings: \"something\",\n      yearlySavings: \"something\",\n      expectedInterest: \"something\",\n      investmentDuration: \"something\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","InvestForm","Header","Table","jsxDEV","_jsxDEV","App","saveData","data","investData","id","Math","random","toString","calculateHandler","yearlyData","currentSavings","savings","yearlyContribution","yearlySaving","expectedReturn","invInterest","duration","invDuration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onGetData","yearlySavings","expectedInterest","investmentDuration","_c","$RefreshReg$"],"sources":["C:/web/invest-tracker/src/App.js"],"sourcesContent":["import React from \"react\";\nimport InvestForm from \"./components/InvestForm\";\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  function saveData(data) {\n    const investData = {\n      ...data,\n      id: Math.random().toString(),\n    };\n  }\n  const calculateHandler = () => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +savings; // feel free to change the shape of this input object!\n    const yearlyContribution = +yearlySaving; // as mentioned: feel free to change the shape...\n    const expectedReturn = +invInterest / 100;\n    const duration = +invDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <InvestForm onGetData={saveData} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <Table\n        savings={\"something\"}\n        yearlySavings={\"something\"}\n        expectedInterest={\"something\"}\n        investmentDuration={\"something\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EACb,SAASC,QAAQA,CAACC,IAAI,EAAE;IACtB,MAAMC,UAAU,GAAG;MACjB,GAAGD,IAAI;MACPE,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;IAC7B,CAAC;EACH;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACC,OAAO,CAAC,CAAC;IAC/B,MAAMC,kBAAkB,GAAG,CAACC,YAAY,CAAC,CAAC;IAC1C,MAAMC,cAAc,GAAG,CAACC,WAAW,GAAG,GAAG;IACzC,MAAMC,QAAQ,GAAG,CAACC,WAAW;;IAE7B;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGT,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIS,cAAc,GAAGP,kBAAkB;MACrDH,UAAU,CAACW,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEZ,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACA;EACF,CAAC;;EAED,oBACEb,OAAA;IAAAwB,QAAA,gBACExB,OAAA,CAACH,MAAM;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV5B,OAAA,CAACJ,UAAU;MAACiC,SAAS,EAAE3B;IAAS;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGnC5B,OAAA,CAACF,KAAK;MACJc,OAAO,EAAE,WAAY;MACrBkB,aAAa,EAAE,WAAY;MAC3BC,gBAAgB,EAAE,WAAY;MAC9BC,kBAAkB,EAAE;IAAY;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACK,EAAA,GA/CQhC,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}